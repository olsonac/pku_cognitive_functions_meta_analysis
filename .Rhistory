# added heterogeneity measure and pooled effect size (was just z-stat and p-value)
# load libraries
library(metafor)
library(metaviz)
library(kableExtra)
library(tidyverse)
library(altmeta)
options(digits = 10) # make sure we have sufficient digits when writing .csv files
# set the working directory to the folder with the data
# make this match the folder where you've put the files
CurDir<-"~/Documents/current/PKU/pku_cog_functions_meta_analysis/May2022_meta-analysis_with_added_papers"
knitr::opts_knit$set(root.dir=CurDir)
setwd(CurDir)
source("ForestPlotFunctions.R")
OutlierSDCutoff <- 2.5
cat(sprintf("Using an outlier SD cutoff of %02.f\n",OutlierSDCutoff))
# read a file with the column names in column 1 and whether to
# include the column in the data or not in column 2
ColNames<-read.csv("ColumnNames.csv")
head(ColNames)
RawData<-read.table("/Users/Olsonac-admin/Documents/current/PKU/pku_cog_functions_meta_analysis/May2022_meta-analysis_with_added_papers/RAW DATA for META-ANALYSIS_June2022.csv",
encoding = "UTF-8",
sep=",",
header=FALSE,
skip=4,
fill=TRUE
)
RawData<-RawData[,1:length(ColNames$ColName)]
colnames(RawData)<-ColNames$ColName
# remove unwanted columns
RawData <- RawData %>% select(which(ColNames$Type != "NULL"))
# remove blank or notes rows
RawDataNBL<-RawData[which((RawData$Function != "") & (RawData$StudyName != "")  & (!is.na(RawData$Year))),]
NonNullColNames<-ColNames[which(ColNames$Type != "NULL"),]
for(i in seq(1,length(NonNullColNames$Type))){
FunctionString<-paste0("as.",NonNullColNames$Type[i])
ConvertType<-get(FunctionString)
RawDataNBL[,NonNullColNames$ColName[i]]<-ConvertType(RawDataNBL[,NonNullColNames$ColName[i]])
}
head(RawDataNBL)
# read study factors and assign
# StudyFactor marks separate articles that use the same population of
# participants
StudyFactorDF<-read.csv("StudyNameStudyFactor.csv")
StudyFactorDF<-StudyFactorDF[,1:2] # in case extra columns are read
head(StudyFactorDF)
RawDataNBL<-left_join(RawDataNBL,StudyFactorDF,by="StudyName")
print("Missing study factors: ")
print(RawDataNBL[which(is.na(RawDataNBL$StudyFactor)),])
# copy PKUData into a data frame called 'MyData'
# this seems unnecessary, but will help if we wanted to adapt this to some new dataset
# later
MyData<-RawDataNBL
MyData$Function<-as.character(MyData$Function)
MyData<-MyData[MyData$Function!="Higher Language Skills Accuracy only",] # Phe incorrect
MyData<-MyData[MyData$Function!="Social Cognition Accuracy",] # Phe incorrect
MyData<-MyData[MyData$Function!= "Sustained and divided attention",]
# make short title shorter for Jahja/IQ
MyData$ShortTitle[MyData$ShortTitle == "WISC-III and WAIS III Vocabulary/Block Design"] <- "WISC-III and WAIS III Vocab/Block Design"
# below we calculate the standardised mean difference
# variables are in the form:
# [data frame] $ [column name]  e.g. PKUData$ExpN refers to the PKU datq frame
# and the "ExpN" column (this has the N for the number of patients in a study)
MyData$CohensD<-((MyData$ControlMean-MyData$ExpMean)/sqrt(((MyData$ExpN-1)*MyData$ExpSD^2 + (MyData$ControlN-1)*MyData$ControlSD^2)/(MyData$ExpN + MyData$ControlN -2)))*MyData$Reversed
MyData$HedgesG<-MyData$CohensD * (1 - (3/(4*(MyData$ExpN + MyData$ControlN - 2)-1)))
CorrectZeroControlSD<-function(ControlSD,ControlMean){
# return a very small fraction of the mean for the SD if the measured SD is zero
if(is.na(ControlSD)){
return(ControlSD)
}
if(ControlSD == 0){
return(ControlMean/1000000)
}
else return(ControlSD)
}
MyData$OriginalControlSD<-MyData$ControlSD
MyData$ControlSD<-mapply(CorrectZeroControlSD,MyData$ControlSD,MyData$ControlMean)
MyData$SMD<- ifelse(MyData$ControlSD != 0,
((MyData$ControlMean - MyData$ExpMean) *
MyData$Reversed) / MyData$ControlSD,0)
# This also reverses scales were lower scores = better (marked with -1 in the 'Reversed' column)
# use control SD rather than pooled SD because patient SD may not equal control SD
# This is the variable 'd'
# use input data SMD when mean/sd are missing
MyData$GlassDelta<-MyData$SMD
MyData$GlassDelta[which(is.na(MyData$ExpMean))]<-MyData$InputDataSMD[which(is.na(MyData$ExpMean))]
head(MyData)
# Function table
MyData$Function<-ifelse(MyData$Function == "IQ*","IQ",MyData$Function)
# put IQ and IQ* together
FTable<-MyData %>% group_by(Function) %>% summarise(MeanCohensD=mean(CohensD,na.rm=TRUE), MeanHedgesG=mean(HedgesG,na.rm=TRUE), SDHedgesG=sd(HedgesG,na.rm=TRUE), MeanGlassDelta=mean(GlassDelta,na.rm=TRUE), N=n())
print(FTable)
CalculateGVg<-function(ExpMean, ExpSD, ExpN,
ControlMean, ControlSD, ControlN,
Reversed, InputDataSMD, Tdiff,
InputDataGlassDeltaSD){
###############################################
#
# calculate standarised mean difference -- see formulas in
# https://www.jepusto.com/alternative-formulas-for-the-smd/
# look at section "independent groups with different variances"
# calculate the scaled standard error squared
# this formula is in the section "Independent groups with different variances"
# we don't take the square root -- this is the value that is inside the square root
# i.e. the squared value -- note that the patient group has the subscript 'T' in
# the formulas in the article and the control groups has the subscript 'C'
# If SD is not available (i.e. is.na(ExpSD) == TRUE) but effect size is available
# also from James E. Pustejovsky
# https://www.jepusto.com/alternative-formulas-for-the-smd/
# using the formula with t, v=N_control - 1 and the small
# sample correction: g = data_g x (1-(3/(4*(N_control -1)-1)))
# Vg = (g^2/t^2 + g^2/2(Nc-1))
# df = Nc -1
SMD<-ifelse(!is.na(ExpSD),
ifelse(ControlSD != 0, # to avoid divide by zero
((as.numeric(ControlMean) - as.numeric(ExpMean)) * as.numeric(Reversed)) /
as.numeric(ControlSD),
0),
NA)
ScaledSESqr<- ifelse(!is.na(ExpSD),
ifelse(ControlSD != 0, # to avoid divide by zero
(ExpSD^2/(ControlSD^2 * ExpN)) + (1/ControlN),
0),
NA)
# note - no square root because we would
# just square this again later
# calculate the degrees of freedom -- this is 'v = Nc-1' in the article
Vdf<-as.numeric(ControlN)-1
# this a correction for small samples -- this is J in the article, with
# Nc-1 as the argumnent to the function.  J is defined in the section
# titled "SMD from a simple independent groups design" - J(x) = 1 - (3/(4x-1))
# x is equal to Nc-1
J<-1-(3/(4*Vdf-1)) # J(Nc-1) from article
# multiply the SMD by the small sample correction to get the effect size
# In the article the raw effect difference 'd' is multiplied by 'J' to
# get 'g', which is the bias corrected estimator of the standardised mean difference
g_value <- ifelse(!is.na(ExpSD),
SMD*J,  # bias-corrected estimator of standardised mean difference
J*InputDataSMD)
# sampling variance of g, the bias corrected estimate of effect size
# this is from the section "A general formula for  g and its sampling variance"
# where the formula is Vd = (SEb/S)^2 + (d^2/2V)
# SEb/S is the value above that we didn't take the square root of,
# so we don't square it here.  We use 'g' as the bias corrected estimate instead
# of d (as noted in article).  V is calculated above (Vdf)
Vg<-ifelse(!is.na(ExpSD),
ScaledSESqr + ((g_value^2)/(2*Vdf)),
InputDataGlassDeltaSD)
return(c(ScaledSESqr,Vdf,J,g_value,Vg))
}
CalculatedGVg<-matrix(
do.call(function(ExpMean, ExpSD, ExpN,
ControlMean, ControlSD, ControlN,
Reversed, InputDataSMD, Tdiff,
InputDataGlassDeltaSD,...) CalculateGVg(
ExpMean, ExpSD, ExpN,
ControlMean, ControlSD, ControlN,
Reversed, InputDataSMD, Tdiff,
InputDataGlassDeltaSD),
MyData),
nrow=length(MyData[,1]))
MyDataWithG<-cbind(MyData,CalculatedGVg)
names(MyDataWithG)<-c(names(MyData),"ScaledSESqr","Vdf","SmallSampCor","g","Vg")
DataNADF<-MyDataWithG[is.na(MyDataWithG$g),]
if(nrow(DataNADF) > 0){
cat("*** WARNING *** Entries below have missing entries for glass delta: \n")
DataNADF %>% kable() %>% kable_styling()
}
head(MyDataWithG)
# mark outliers
MyDataWithG$g <- as.numeric(as.character(MyDataWithG$g))
MyDataWithG <- MyDataWithG %>% group_by(Function) %>% mutate(FunctionMean = mean(g), FunctionSD = sd(g))
MyDataWithG$OutlierLowCut<-MyDataWithG$FunctionMean - (MyDataWithG$FunctionSD * OutlierSDCutoff)
MyDataWithG$OutlierHighCut<-MyDataWithG$FunctionMean +  (MyDataWithG$FunctionSD * OutlierSDCutoff)
MyDataWithG$Outlier <- 0
MyDataWithG$Outlier[(MyDataWithG$g < MyDataWithG$OutlierLowCut) | (MyDataWithG$g > MyDataWithG$OutlierHighCut)]<-1
OutlierDF <- MyDataWithG[MyDataWithG$Outlier == 1,]
cat(sprintf("The number of outliers was: %d\n",nrow(OutlierDF)))
cat("Outliers:\n")
OutlierDF %>% kable() %>% kable_styling()
MyDataWithG <- MyDataWithG[MyDataWithG$Outlier == 0,]
write.csv(MyDataWithG,"/Users/Olsonac-admin/Documents/current/PKU/pku_cog_functions_meta_analysis/May2022_meta-analysis_with_added_papers/DataForMetaAnalysis.csv",row.names = FALSE)
rm(list = ls()) # clear global environment
library(tidyverse)
# set working directory
CurDir<-"~/Documents/current/PKU/pku_cog_functions_meta_analysis/May2022_meta-analysis_with_added_papers"
setwd(CurDir)
FunctionResultsFolder<-paste0(CurDir,"/FunctionResults2")
ForestPlotsFolder<-paste0(CurDir,"/ForestPlots2")
# set output filename for overall results summary
OverallSummaryFilename<-paste0(FunctionResultsFolder,"/OverallResultSummary.csv")
HeaderDF <- OverallSummmaryHeader<-read.csv("OverallSummaryHeader.csv")
# generates a warning because there is no data, but this is OK
write.csv(HeaderDF,OverallSummaryFilename,append=FALSE,row.names=FALSE)
# read in raw data
RawData<-read.csv("DataForMetaAnalysis.csv")
FunctionOrderInformation<-read.csv("SummaryTableFunctionOrder.csv")
RawData$StudyNameFactor<-as.factor(RawData$StudyName)
RawData$FunctionFactor<-as.factor(RawData$Function)
RawData$TaskNameFactor<-as.factor(RawData$ShortTitle)
RawData$StudyFactor <- as.factor(RawData$StudyFactor)
# done with preliminaries - now we can do analyses for separate functions
####################################################################
# Flexibility
FunctionID <- "Flexibility"   # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Flexibility" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 0
MinES<- -5
MaxES<- 2
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Reasoning
FunctionID <- "Reasoning "   # note extra space # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Reasoning" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 0
MinES<- -7
MaxES<- 2
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Inhibition
FunctionID <- "Inhibition"   # note extra space # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Inhibition" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 0
MinES<- -4
MaxES<- 3.2
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Sustained attention
FunctionID <- "Sustained attention"   # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Sustained attention" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 0
# different parts of the forest plot
PlotPercentage<- .35  # percentage of space devoted to forest plot (vs text)
StudyNamePercent<-0.25 # percent of _text_ area for study name
MeanPercent<-0.09 # width of columns for means - % of total _text_ area
SDPercent<-0.065 # width of column for SD
NPercent<-0.04 # width of column for N
WtPercent<-0.04
UsePlotRangeDefaults <- 0
MinES<- -7
MaxES<- 2
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Higher Language Skills
FunctionID <- "Higher Language Skills"   # note extra space # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Higher language skills" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 1
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Verbal STM/WM
FunctionID <- "Verbal STM/WM"   # note extra space # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Verbal STM/WM" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 1
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Verbal STM without WM
FunctionID <- "Verbal STM/WM"   # note extra space # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Verbal STM/WM-w/o WM" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 1
MyData<-RawData %>% filter(Function == FunctionID)
# take out all results that include working memory - Pilotto could be back + forward
MyData <- MyData[MyData$StudyName != "Pilotto et al 2021",]
MyData <- MyData[MyData$StudyName != "Abgottspon et al. ",]
MyData <- MyData[(MyData$StudyName != "Aitkenhead et al 2021") | MyData$ShortTitle != "Digit backwards (from WAIS IV)",]
MyData <- MyData[MyData$StudyName != "Channon et al 2005",]
MyData <- MyData[MyData$StudyName != "Channon et al 2007",]
FunctionFilename<-gsub("/","_",unique(MyData$Function))
FunctionFilename <- paste0(FunctionFilename,"_without_WM")
# this will be used for plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Visual STM
FunctionID <- "Visual STM"   # note extra space # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Visual STM" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 1
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Verbal learning LTM
FunctionID <- "Verbal learning LTM"   # note extra space # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Verbal learning/LTM" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 1
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Visual learning LTM
FunctionID <- "Visual learning LTM"   # note extra space # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Visual learning/LTM" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 0
MinES<- -5
MaxES<- 2
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Visuo-spatial skills
FunctionID <- "Visuo-spatial skills"   # note extra space # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Visuo-spatial skills" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 1
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Simple RT-Visuo-spatial
FunctionID <- "Simple RT-Visuo-spatial"   # note extra space # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Simple RT: Visuo-spatial" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 0
MinES<- -6
MaxES<- 3
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Visual spatial attention RT
FunctionID <- "Visual spatial attention RT"   # note extra space # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Visual spatial attention RT" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 1
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Visuo-spatial attention acc
FunctionID <- "Visuo-spatial attention acc"   # note extra space # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Visuo-spatial attention: accuracy" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 1
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Visuo motor control
FunctionID <- "Visuo motor control"   # note extra space # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Visuo motor control" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 1
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Naming RT
FunctionID <- "Naming RT"   # note extra space # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Naming RT" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 1
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Language Accuracy
FunctionID <- "Language Accuracy"   # note extra space # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Language accuracy" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 1
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("  ","_",gsub("/","_",unique(MyData$Function)))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Spelling
FunctionID <- "Spelling"   # note extra space # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Spelling" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 1
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Phonological Tasks
FunctionID <- "Phonological Tasks"   # note extra space # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Phonological tasks" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 1
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# Social Cognition
FunctionID <- "Social Cognition"   # note extra space # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "Social cognition" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 1
UsePlotRangeDefaults <- 1
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
# IQ
FunctionID <- "IQ"   # this sets the function we will run the analysis on
# it should match the "Function" column variable from the input data frame
FunctionTitle <- "IQ" # This will be used to label the plot, so could be different from FunctionID
####################### SET THE OUTPUT FILENAME FOR THE PLOT HERE ##################
UsePlotPercentDefaults <- 0
PlotPercentage<- .3  # percentage of space devoted to forest plot (vs text)
StudyNamePercent<-0.22 # percent of _text_ area for study name
MeanPercent<-0.09 # width of columns for means - % of total _text_ area
SDPercent<-0.065 # width of column for SD
NPercent<-0.04 # width of column for N
WtPercent<-0.04
UsePlotRangeDefaults <- 1
MyData<-RawData %>% filter(Function == FunctionID)
FunctionFilename<-gsub("/","_",unique(MyData$Function))
# this will be used to label the plot and report file output.
rmarkdown::render(input = "MetaAnalysisPKUv2_OneFunction2.Rmd",
output_format = "html_document",
output_file = paste0(FunctionResultsFolder,"/",FunctionFilename,"_meta-analysis_report.html"))
233-40
193/20
40+(20*9)
233-220
